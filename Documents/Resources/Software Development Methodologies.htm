<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0060)http://www.itinfo.am/eng/software-development-methodologies/ -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="author" content="">
<meta name="keywords" content="">
<meta name="description" content="">
<link rel="stylesheet" href="./Software Development Methodologies_files/main.css">
<link rel="stylesheet" type="text/css" href="./Software Development Methodologies_files/text.css">
<link rel="stylesheet" type="text/css" href="./Software Development Methodologies_files/tree.css">
<link rel="stylesheet" type="text/css" href="./Software Development Methodologies_files/crossLink.css">
<link rel="stylesheet" type="text/css" href="./Software Development Methodologies_files/css.php">
<script type="text/javascript">var rootUrl = 'http://www.itinfo.am/';</script>
<script type="text/javascript" src="./Software Development Methodologies_files/tree.js"></script>
<script type="text/javascript" src="./Software Development Methodologies_files/main.js"></script>
<script type="text/javascript" src="./Software Development Methodologies_files/jquery-1.4.2.min.js"></script>
<script type="text/javascript" src="./Software Development Methodologies_files/jquery.qtip-1.0.min.js"></script>
<script type="text/javascript" src="./Software Development Methodologies_files/crossLink.js"></script>
<title>Software Development Methodologies</title>
<style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>
<body>
    <div id="container">
        <!--sphider_noindex-->
    	<div id="topDiv">
        	<div id="topLogoDiv">
            	<a href="http://www.itinfo.am/eng/"><img src="./Software Development Methodologies_files/topLogo_eng.jpg" alt="Software Development Methodologies"></a>
            </div>
            <div id="topRight" align="right">
            <div id="topLinks">
			            <a rel="nofollow" href="http://www.itinfo.am/eng/?action=login&amp;pg=/eng/software-development-methodologies/">Login</a>
            &nbsp;|&nbsp;
            <a rel="nofollow" href="http://www.itinfo.am/eng/?action=register&amp;pg=/eng/software-development-methodologies/">Register</a>
                        </div>
             <div id="topSearchDiv">
             <form method="get" action="http://www.itinfo.am/eng/search/">
            <table cellpadding="0" cellspacing="0" border="0">
                <tbody><tr>
                <td><input type="text" class="searchTxt" name="q">&nbsp;</td>
                <td>&nbsp;<input type="submit" class="srchBtn" value="Search" name="search"></td>
                </tr>
                </tbody></table>
             </form>
            </div>
            </div>
        </div>
        <div id="topMenuDiv">
        	<div id="topMenuL"></div>
            <div id="topMenuBody">
            	<div class="topMenuItem"><a href="http://www.itinfo.am/eng/">Home</a></div>
                <div class="menuSep">&nbsp;</div>
                <div class="topMenuItem"><a href="http://www.itinfo.am/eng/knowledge_db/">Knowledge Database</a></div>
                <div class="menuSep">&nbsp;</div>
                <div class="topMenuItem"><a href="http://www.itinfo.am/eng/suggest/">Suggest an Article</a></div>
                <div class="menuSep">&nbsp;</div>
                <div class="topMenuItem"><a href="http://www.itinfo.am/eng/contacts/">Contact Us</a></div>
                <div class="topMenuItem" style="float:right"><a href="http://www.itinfo.am/arm/software-development-methodologies/">Armenian</a></div>            </div>
            <div id="topMenuR"></div>
            <div class="clearfloat">&nbsp;</div>
        </div>
        <!--/sphider_noindex-->
                <div id="content">
        	<div id="contentTop"></div>
            <div id="contentBody">
            	<h1 class="h1Big">Software Development Methodologies</h1><div class="categoryDiv"><strong>Category:</strong>&nbsp;<span class="categoryLink"><a href="http://www.itinfo.am/eng/it-standards-and-methodologies/" title="Subpages: 9">IT Standards and Methodologies</a></span></div><div id="toc" style="width: auto;"><p id="toc-header">Contents</p><ul><li class="toc1"><span class="tocNum">1</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter1">Introduction</a></li>
<li class="toc1"><span class="tocNum">2</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter2">Agile Software Development Methodology</a></li>
<li class="toc1"><span class="tocNum">3</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter3">Crystal Methods Methodology</a></li>
<li class="toc1"><span class="tocNum">4</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter4">Dynamic Systems Development Model Methodology</a></li>
<li class="toc1"><span class="tocNum">5</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter5">Extreme Programming (XP) Methodology</a></li>
<li class="toc1"><span class="tocNum">6</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter6">Feature Driven Development Methodology</a></li>
<li class="toc1"><span class="tocNum">7</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter7">Joint Application Development (JAD) Methodology</a></li>
<li class="toc1"><span class="tocNum">8</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter8">Lean Development (LD) Methodology</a></li>
<li class="toc1"><span class="tocNum">9</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter9">Rapid Application Development (RAD) Methodology</a></li>
<li class="toc1"><span class="tocNum">10</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter10">Rational Unified Process (RUP) Methodology</a></li>
<li class="toc1"><span class="tocNum">11</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter11">Scrum Methodology</a></li>
<li class="toc1"><span class="tocNum">12</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter12">Spiral Methodology</a></li>
<li class="toc1"><span class="tocNum">13</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter13">Systems Development Life Cycle (SDLC) Methodology</a></li>
<li class="toc1"><span class="tocNum">14</span><a href="http://www.itinfo.am/eng/software-development-methodologies/#chapter14">Waterfall (a.k.a. Traditional) Methodology</a></li></ul></div><div class="clearfloat"></div>
<h1>
<a name="chapter1"></a>Introduction</h1>
<p>A <span class="crossLinkItem" id="crossLinkItem_102_00">software development</span> methodology or system development methodology in  software engineering is a framework that is used to structure, plan, and control the process of developing an information system.</p>
<p>There are the following methodologies:</p>
<ul>
<li>Agile <span class="crossLinkItem" id="crossLinkItem_102_20">Software Development</span> </li>
<li>Crystal Methods</li>
<li>Dynamic Systems Development Model (DSDM)</li>
<li>Extreme Programming (XP)</li>
<li>Feature Driven Development (FDD)</li>
<li>Joint Application Development (JAD)</li>
<li>Lean Development (LD)</li>
<li>Rapid Application Development (RAD)</li>
<li>Rational Unified Process (RUP)</li>
<li>Scrum</li>
<li>Spiral</li>
<li>Systems Development Life Cycle (SDLC)</li>
<li>Waterfall (a.k.a. Traditional)</li>
</ul>
<p>&nbsp;</p>
<h1>
<a name="chapter2"></a>Agile <span class="crossLinkItem" id="crossLinkItem_102_30">Software Development</span> Methodology </h1>
<p>Agile <span class="crossLinkItem" id="crossLinkItem_102_40">software development</span> is a conceptual framework for undertaking  software engineering projects. There are a number of agile<span class="crossLinkItem" id="crossLinkItem_102_60">software development</span> methodologies e.g. Crystal Methods, Dynamic Systems Development Model (DSDM), and Scrum. </p>
<p>&nbsp;</p>
<p>Most agile methods attempt to minimize risk by developing software in short timeboxes, called iterations, which typically last one to four weeks. Each iteration is like a miniature software project of its own, and includes all the tasks necessary to release the mini-increment of new functionality: planning, requirements analysis, design, coding, testing, and documentation. While iteration may not add enough functionality to warrant releasing the product, an agile software project intends to be capable of releasing new software at the end of every iteration. At the end of each iteration, the team reevaluates project priorities.</p>
<p>&nbsp;</p>
<p>Agile methods emphasize realtime communication, preferably face-to-face, over written documents. Most agile teams are located in a bullpen and include all the people necessary to finish the software. At a minimum, this includes programmers and the people who define the product such as product managers, business analysts, or actual customers. The bullpen may also include testers, interface designers, technical writers, and <span class="crossLinkItem" id="crossLinkItem_104_00">management</span> .</p>
<p>&nbsp;</p>
<p>Agile methods also emphasize working software as the primary measure of progress. Combined with the preference for face-to-face communication, agile methods produce very little written documentation relative to other methods.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter3"></a>Crystal Methods Methodology</h1>
<p>Alistair Cockburn developed the Crystal Methods approach. His focus is on the people, interaction, community, skills, talents, and communications with the belief that these are what have the first-order effect on performance. Process, he says, is important, but secondary.</p>
<p>&nbsp;</p>
<p>Cockburn's philosophy translate into a recognition that each team has a different set of talents and skills and therefore each team should use a process uniquely tailored to it. And it means that the process should be minimized - barely significant.</p>
<p>&nbsp;</p>
<p>The use of the word “crystal” refers to the various facets of a gemstone - each a different face on an underlying core. The underlying core represents values and principles, while each facet represents a specific set of elements such as techniques, roles, tools, and standards. Cockburn also differentiates between methodology, techniques, and policies. A <strong>methodology</strong> is a set of elements (practices, tools); <strong>techniques</strong> are skill areas such as developing use cases; and <strong>policies </strong>dictate organizational “musts”.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter4"></a>Dynamic Systems Development Model Methodology</h1>
<p>The Dynamic Systems Development Model was developed in the U.K. in the mid-1990s. It is the evolution of rapid application development (RAD) practices. DSDM boasts the best-supported training and documentation of any of the agile software development techniques, at least in Europe. DSDM favors the philosophy that nothing is built perfectly the first time and looks to <span class="crossLinkItem" id="crossLinkItem_102_130">software development</span> as an exploratory endeavor. </p>
<p>&nbsp;</p>
<p>The nine principles of DSDM are:</p>
<ul>
<li>Active user involvement.</li>
<li>Empowered teams that the authority to can make decisions.</li>
<li>A focus on frequent delivery of products.</li>
<li>Using fitness for business purpose as the essential criterion for acceptance of deliverables.</li>
<li>Iterative and incremental development to ensure convergence on an accurate business solution.</li>
<li>Reversible changes during development.</li>
<li>Requirements that is baselined at a high level.</li>
<li>Integrated testing throughout the life cycle.</li>
<li>Collaboration and cooperation between all stakeholders.</li>
</ul>
<p>&nbsp;</p>
<h1>
<a name="chapter5"></a>Extreme Programming (XP) Methodology</h1>
<p>XP is a methodology for creating <span class="crossLinkItem" id="crossLinkItem_102_140">software</span> within a very unstable environment. It allows flexibility within the modelling process. </p>
<p>&nbsp;</p>
<p>The main goal of XP is to lower the cost of change in software requirements. With traditional system development methodologies, like the Waterfall Methodology, the requirements for the system are determined and often “frozen” at the beginning of the <span class="crossLinkItem" id="crossLinkItem_102_151">development</span> project. This means that the cost of changing the requirements at a later stage in the project - something that is very common in the real-world can be very high. </p>
<p>&nbsp;</p>
<p><strong>XP Core Practices</strong></p>
<p>The core practices of Extreme Programming, as described in the first edition of “Extreme Programming Explained” can be grouped into four areas (12 practices) as follows:</p>
<p>&nbsp;</p>
<p><strong>Fine scale feedback</strong></p>
<ul>
<li>Test driven development</li>
<li>Planning game</li>
<li>Whole team</li>
<li>Pair programming</li>
</ul>
<p>&nbsp;</p>
<p><strong>Continuous process rather than batch</strong></p>
<ul>
<li>Continuous Integration</li>
<li>Design Improvement </li>
<li>Small Releases</li>
</ul>
<p>&nbsp;</p>
<p><strong>Shared understanding</strong></p>
<ul>
<li>Simple design</li>
<li>System metaphor</li>
<li>Collective code ownership</li>
<li>Coding standards or coding conventions</li>
</ul>
<p>&nbsp;</p>
<p><strong>Programmer welfare</strong></p>
<ul>
<li>Sustainable pace (i.e. forty hour week)</li>
</ul>
<p>&nbsp;</p>
<p>In the second edition of “Extreme Erogramming Explained” a set of corollary practices are listed in addition to the primary practices.</p>
<p>&nbsp;</p>
<p>The core practices are derived from generally accepted best practices, and are taken to extremes:</p>
<ul>
<li>
<strong>Interaction between developers and customers is good.</strong> Therefore, an XP team is supposed to have a customer on site, who specifies and prioritizes work for the team, and who can answer questions as soon as they arise. (In practice, this role is sometimes fulfilled by a customer proxy.)</li>
<li>
<strong>If learning is good</strong>, take it to extremes: Reduce the length of development and feedback cycles. Test early.</li>
<li>
<strong>Simple code is more likely to work.</strong> Therefore, extreme programmers only write code to meet actual needs at the present time in a project, and go to some lengths to reduce complexity and duplication in their code.</li>
<li>
<strong>If simple code is good</strong>, re-write code when it becomes complex.</li>
<li>
<strong>Code reviews are good</strong>. Therefore XP programmers work in pairs, sharing one screen and keyboard (which also improves communication) so that all code is reviewed as it is written.</li>
<li>
<strong>Testing code is good.</strong> Therefore, in XP, tests are written before the code is written. The code is considered complete when it passes the tests (but then it needs refactoring to remove complexity). The system is periodically, or immediately tested using all pre-existing automated tests to assure that it works. See test-driven development.</li>
</ul>
<p>&nbsp;</p>
<p>It used to be thought that Extreme Programming could only work in small teams of fewer than 12 persons. However, XP has been used successfully on teams of over a hundred developers.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter6"></a>Feature Driven Development Methodology</h1>
<p>Jeff De Luca and Peter Coad were both greatly involved in developing the Feature Driven Development methodology. Peter describes FDD as having just enough process to ensure scalability and repeatability while encouraging creativity and innovation.</p>
<p>&nbsp;</p>
<p>More specifically, Feature Driven Development asserts that:</p>
<ul>
<li>A system for building systems is necessary in order to scale to larger projects.</li>
<li>A simple, but well-define process will work best.</li>
<li>Process steps should be logical and their worth immediately obvious to each team member.</li>
<li>“Process pride” can keep the real work from happening.</li>
<li>Good processes move to the background so team members can focus on results.</li>
<li>Short, iterative, feature-driven life cycles are best.</li>
</ul>
<p>&nbsp;</p>
<p>FDD proceeds to address the items above with this simple process (numbers in brackets indicate the project time spent):</p>
<p>&nbsp;</p>
<p>1. Develop an overall model (10 percent initial, 4 percent ongoing)</p>
<p>2. Build a features list (4 percent initial, 1 percent ongoing)</p>
<p>3. Plan by feature (2 percent initial, 2 percent ongoing)</p>
<p>4. Design by feature</p>
<p>5. Build by feature (77 percent for design and build combined)</p>
<p>&nbsp;</p>
<h1>
<a name="chapter7"></a>Joint Application Development (JAD) Methodology</h1>
<p>JAD is a requirements-definition and user-interface design methodology in which end-users, executives, and developers attend intense off-site meetings to work out a system's details. So the Joint Application Development (JAD) methodology aims to involve the client in the design and development of an application. This is accomplished through a series of collaborative workshops called JAD sessions. Two employees of IBM, Chuck Morris and Tony Crawford, developed the JAD methodology in the late 1970s and began teaching the approach in to the 1980s.</p>
<p>&nbsp;</p>
<p>JAD focuses on the business problem rather than technical details. It is most applicable to the development of business systems, but it can be used successfully for systems software. It produces its savings by shortening the elapsed time required to gather a system's requirements and by gathering requirements better, thus reducing the number of costly, downstream requirements changes. Its success depends on effective leadership of the JAD sessions; on participation by key end-users, executives, and developers; and on achieving group synergy during JAD sessions.</p>
<p>&nbsp;</p>
<p>In contrast to the Waterfall approach, JAD is thought to lead to shorter development times and greater client satisfaction, both of which stem from the constant involvement of the client throughout the development process. On the other hand, with the traditional approach to systems development, the developer investigates the system requirements and develops an application, with client input consisting of a series of interviews.</p>
<p>&nbsp;</p>
<p>Rapid application development (RAD), a variation on JAD, attempts to create an application more quickly through strategies that include fewer formal methodologies and reusing software components.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter8"></a>Lean Development (LD) Methodology</h1>
<p>Lean Development focuses on the creation of change-tolerant software. This methodology embodies the notion of dynamic stability which can be thought of as similar to how Scrum embraces controlled chaos. Bob Charette, the originator, writes that the measurable goal of LD is to build software with one-third the human effort, one-third the development hours and one-third the investment as compared to what SEI (Software Engineering Institute) CMM Level 3 organization would achieve.</p>
<p>&nbsp;</p>
<p>There are 12 principles of Lean Development:</p>
<p>1. Satisfying the customer is the highest priority.</p>
<p>2. Always provide the best value for the money.</p>
<p>3. Success depends on active customer participation.</p>
<p>4. Every LD project is a team effort.</p>
<p>5. Everything is changeable.</p>
<p>6. Domain, not point, solutions.</p>
<p>7. Complete, don't construct.</p>
<p>8. An 80 percent solution today instead of 100 percent solution tomorrow.</p>
<p>9. Minimalism is essential.</p>
<p>10. Needs determine technology.</p>
<p>11. Product growth is feature growth, not size growth.</p>
<p>12. Never push LD beyond its limits.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter9"></a>Rapid Application Development (RAD) Methodology</h1>
<p>“Rapid-development language” is a general term that refers to any programming language that offers speedier implementation than do traditional third-generation languages such as C/C++, Pascal, or Fortran. Rapid-Development Languages (RDLs) produce their savings by reducing the amount of construction needed to build a product. Although the savings are realized during construction, the ability to shorten the construction cycle has projectwide implications: shorter construction cycles make incremental lifecycles such as Evolutionary Prototyping practical. Because RDLs often lack first-rate performance, constrain flexibility, and are limited to specific kinds of problems, they are usually better suited to the development of in-house business software and limited-distribution custom software than systems software.</p>
<p>&nbsp;</p>
<p>RAD (rapid application development) proposes that products can be developed faster and of higher quality by:</p>
<ul>
<li>Using workshops or focus groups to gather requirements.</li>
<li>Prototyping and user testing of designs.</li>
<li>Re-using software components.</li>
<li>Following a schedule that defers design improvements to the next product version.</li>
<li>Keeping review meetings and other team communication informal.</li>
</ul>
<p>There are commercial products that include requirements gathering tools, prototyping tools, software development environments such as those for the Java platform, groupware for communication among development members, and testing tools. RAD usually embraces object-oriented programming methodology, which inherently fosters software re-use. The most popular object-oriented programming languages, C++ and Java, are offered in visual programming packages often described as providing rapid application development.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter10"></a>Rational Unified Process (RUP) Methodology</h1>
<p>The Rational Unified Process attempts to capture many of modern software development's best practices in a form suitable for a wide range of projects and organizations. This process recognizes that the traditional waterfall approach can be inefficient because it idles key team members for extended periods of time. Many feel that the waterfall approach also introduces a lot of risk because it defers testing and integration until the end of the project lifecycle. Problems found at this stage are very expense to fix.</p>
<p>&nbsp;</p>
<p>By contrast, RUP represents an iterative approach that is superior for a number of reasons:</p>
<ul>
<li>It lets you take into account changing requirements which despite the best efforts of all project managers are still a reality on just about every project.</li>
<li>Integration is not one “big bang” at the end; instead, elements are integrated progressively.</li>
<li>Risks are usually discovered or addressed during integration. With the iterative approach, you can mitigate risks earlier. </li>
<li>Iterative development provides <span class="crossLinkItem" id="crossLinkItem_104_10">management</span> with a means of making tactical changes to the product. It allows you to release a product early with reduced functionality to counter a move by a competitor, or to adopt another vendor for a given technology. </li>
<li>Iteration facilitates reuse; it is easier to identify common parts as they are partially designed or implemented than to recognize them during planning. </li>
<li>When you can correct errors over several iterations, the result is a more robust architecture. Performance bottlenecks are discovered at a time when they can still be addressed, instead of creating panic on the eve of delivery.</li>
<li>Developers can learn along the way, and their various abilities and specialties are more fully employed during the entire lifecycle. Testers start testing early, technical writers begin writing early, and so on.</li>
<li>The development process itself can be improved and refined along the way. The assessment at the end of iteration not only looks at the status of the project from a product or schedule perspective, but also analyzes what should be changed in the organization and in the process to make it perform better in the next iteration.</li>
</ul>
<p>&nbsp;</p>
<h1>
<a name="chapter11"></a>Scrum Methodology</h1>
<p>Scrum is an agile method for project <span class="crossLinkItem" id="crossLinkItem_104_20">management</span> developed by Ken Schwaber. Its goal is to dramatically improve productivity in teams previously paralyzed by heavier, process-laden methodologies. </p>
<p>&nbsp;</p>
<p>Scrum is characterized by:</p>
<ul>
<li>A living backlog of prioritized work to be done.</li>
<li>Completion of a largely fixed set of backlog items in a series of short iterations or sprints.</li>
<li>A brief daily meeting (called a scrum), at which progress is explained, upcoming work is described, and obstacles are raised.</li>
<li>A brief planning session in which the backlog items for the sprint will be defined.</li>
<li>A brief heartbeat retrospective, at which all team members reflect about the past sprint.</li>
</ul>
<p>Scrum is facilitated by a scrum master, whose primary job is to remove impediments to the ability of the team to deliver the sprint goal. The scrum master is not the leader of the team (as they are self-organizing) but acts as a productivity buffer between the team and any destabilizing influences.</p>
<p>&nbsp;</p>
<p>Scrum enables the creation of self-organizing teams by encouraging verbal communication across all team members and across all disciplines that are involved in the project. A key principle of scrum is its recognition that fundamentally empirical challenges cannot be addressed successfully in a traditional “process control” manner. As such, scrum adopts an empirical approach - accepting that the problem cannot be fully understood or defined, focusing instead on maximizing the team's ability to respond in an agile manner to emerging challenges.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter12"></a>Spiral Methodology</h1>
<p>The Spiral Lifecycle Model is a sophisticated lifecycle model that focuses on early identification and reduction of project risks. A spiral project starts on a small scale, explores risks, makes a plan to handle the risks, and then decides whether to take the next step of the project - to do the next iteration of the spiral. It derives its rapiddevelopment benefit not from an increase in project speed, but from continuously reducing the projects risk level - which has an effect on the time required to deliver it. Success at using the Spiral Lifecycle Model depends on conscientious, attentive, and knowledgeable <span class="crossLinkItem" id="crossLinkItem_104_30">management</span> .It can be used on most kinds of projects, and its risk-reduction focus is always beneficial. </p>
<p>&nbsp;</p>
<p>The spiral methodology extends the waterfall model by introducing prototyping. It is generally chosen over the waterfall approach for large, expensive, and complicated projects.</p>
<p>&nbsp;</p>
<p>At a high-level, the steps in the spiral model are as follows:</p>
<p>&nbsp;</p>
<p>1. The new system requirements are defined in as much detail as possible. This usually involves interviewing a number of users representing all the external or internal users and other aspects of the existing system.</p>
<p>2. A preliminary design is created for the new system.</p>
<p>3. A first prototype of the new system is constructed from the preliminary design. This is usually a scaled-down system, and represents an approximation of the characteristics of the final product.</p>
<p>4. A second prototype is evolved using four steps:</p>
<ul>
<li>Evaluate the first prototype and identify its strengths, weaknesses, and risks.</li>
<li>Define the requirements of the second prototype.</li>
<li>Plan and design the second prototype.</li>
<li>Construct and test the second prototype.</li>
</ul>
<p>5. At the project sponsor's option, the entire project can be aborted if the risk is deemed too great. Risk factors might involve development cost overruns, operating-cost miscalculation, or any other factor that could result in a less-than-satisfactory final product.</p>
<p>6. The existing prototype is evaluated in the same manner as was the previous prototype, and, if necessary, another prototype is developed from it according to the fourfold procedure outlined above.</p>
<p>7. The preceding steps are iterated until the customer is satisfied that the refined prototype represents the final product desired.</p>
<p>8. The final system is constructed, based on the refined prototype.</p>
<p>9. The final system is thoroughly evaluated and tested. Routine maintenance is carried out on a continuing basis to prevent large-scale failures and to minimize downtime.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter13"></a>Systems Development Life Cycle (SDLC) Methodology</h1>
<p>The systems development life cycle (SDLC) is a conceptual model used in project <span class="crossLinkItem" id="crossLinkItem_104_40">management</span> that describes the stages involved in an information system development project, from an initial feasibility study through maintenance of the completed application. Various SDLC methodologies have been developed to guide the processes involved, including the waterfall model (which was the original SDLC method); rapid application development (RAD); joint application development (JAD); the fountain model; the spiral model; build and fix; and synchronize-and-stabilize. </p>
<p>&nbsp;</p>
<p>Often, several models are combined into some sort of hybrid methodology. Documentation is crucial regardless of the type of model chosen or devised for any application, and is usually done in parallel with the development process. Some methods work better for specific types of projects, but in the final analysis, the most important factor for the success of a project may be how closely the particular plan was followed.</p>
<p>&nbsp;</p>
<p>In general, an SDLC methodology follows these steps:</p>
<p>1. If there is an existing system, its deficiencies are identified. This is accomplished by interviewing users and consulting with support personnel.</p>
<p>2. The new system requirements are defined including addressing any deficiencies in the existing system with specific proposals for improvement.</p>
<p>3. The proposed system is designed. Plans are created detailing the hardware, operating systems, programming, and security issues.</p>
<p>4. The new system is developed. The new components and programs must be obtained and installed. Users of the system must be trained in its use, and all aspects of performance must be tested. If necessary, adjustments must be made at this stage.</p>
<p>5. The system is put into use. This can be done in various ways. The new system can phased in, according to application or location, and the old system gradually replaced. In some cases, it may be more cost-effective to shut down the old system and implement the new system all at once.</p>
<p>6. Once the new system is up and running for a while, it should be exhaustively evaluated. Maintenance must be kept up rigorously at all times. Users of the system should be kept up-to-date concerning the latest modifications and procedures.</p>
<p>&nbsp;</p>
<h1>
<a name="chapter14"></a>Waterfall (a.k.a. Traditional) Methodology</h1>
<p>The waterfall model is a popular version of the systems development life cycle model for software engineering. Often considered the classic approach to the systems development life cycle, the waterfall model describes a development method that is rigid and linear. Waterfall development has distinct goals for each phase of development where each phase is completed for the next one is started and there is no turning back.</p>
<p>&nbsp;</p>
<p>The perceived advantages of the waterfall process are that it allows for departmentalization and managerial control. A schedule is typically set with deadlines for each stage of development and a product can proceed through the development process. In theory, this process leads to the project being delivered on time because each phase has been planned in detail.</p>
<p>&nbsp;</p>
<p>In practice, waterfall development often falls short of expectations as it does not embrace the inevitable changes and revisions that become necessary with most projects. Once an application is in the testing stage, it is very difficult to go back and change something that was not thought of in the concept stage. Alternatives to the waterfall model include joint application development (JAD), rapid application development (RAD), sync and stabilize, build and fix, and the spiral model.</p>
<p><br><br></p>
<hr><div class="categoryDiv"><strong>Category:</strong>&nbsp;<span class="categoryLink"><a href="http://www.itinfo.am/eng/it-standards-and-methodologies/" title="Subpages: 9">IT Standards and Methodologies</a></span></div><hr><br>            </div>
            <div id="contentBottom"></div>
        </div>
                <!--sphider_noindex-->
        <div id="contentRight">
        	             <div class="block">
                <div class="blockTop"></div>
                <div class="blockBody">
              	  <div class="blockTitle">Navigation</div>
                  <table cellpadding="0" cellspacing="3" border="0" class="navTbl">
                                 <tbody><tr>
                 <td valign="top"><img src="./Software Development Methodologies_files/bullet.jpg" width="10px" alt=""></td>
                 <td valign="top"><a href="http://www.itinfo.am/eng/it-standards-and-methodologies/">IT Standards and Methodologies</a></td>
                 </tr>
                                  <tr>
                 <td valign="top"><img src="./Software Development Methodologies_files/bullet.jpg" width="10px" alt=""></td>
                 <td valign="top"><a href="http://www.itinfo.am/eng/job-descriptions/">Job Descriptions</a></td>
                 </tr>
                                  <tr>
                 <td valign="top"><img src="./Software Development Methodologies_files/bullet.jpg" width="10px" alt=""></td>
                 <td valign="top"><a href="http://www.itinfo.am/eng/it-certifications/">IT Certifications</a></td>
                 </tr>
                                  <tr>
                 <td valign="top"><img src="./Software Development Methodologies_files/bullet.jpg" width="10px" alt=""></td>
                 <td valign="top"><a href="http://www.itinfo.am/eng/corporate-management/">Corporate Management</a></td>
                 </tr>
                                   </tbody></table>
                </div>
                <div class="blockBottom"></div>
            </div>
            <div class="clearfloat">&nbsp;</div>
                        <div class="block">
                <div class="blockTop"></div>
                <div class="blockBody">
                                    <div class="blockTitle"><a href="http://www.itinfo.am/eng/news/">News</a></div> 
                  <div><a href="http://www.itinfo.am/eng/news/2010/08/25/itil-news/">ITIL is being translated into Armenian</a></div>                  </div>
                <div class="blockBottom"></div>
            </div>
                    </div>
         
        <!--/sphider_noindex-->
                <!--sphider_noindex-->
        <div class="clearfloat">&nbsp;</div>
         <!--<div id="footer">
        	<div id="footerTop">&nbsp;</div>
            <div id="footerBody">FOOTER</div>
            <div id="footerBottom">&nbsp;</div>
        </div>
        -->
        <div id="footbottomDiv">
        © 2016 <a href="http://www.amtp.am/" target="_blank">Association of Modern Technologies Professionals
        </a></div><a href="http://www.amtp.am/" target="_blank">
        <!--/sphider_noindex-->
    </a></div><a href="http://www.amtp.am/" target="_blank">
    <script language="javascript" type="text/javascript">
    var container = document.getElementById('toc');
	var width = 690;
	if(container != null)
		container.style.width = (container.clientWidth > (width - 1)) ? width + "px" : "auto";
</script>

</a></body></html>